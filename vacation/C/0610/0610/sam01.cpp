#include <stdio.h>
#include <iostream>
#include <iomanip>								// setw() 함수를 사용할 수 있게 해주는 헤더 파일
using namespace std;

void main() {

//	서식 있는 출력
//	printf("출력서식", 출력할 내용);
//	출력 서식은 출력 서식 문자를 제외한 나머지 내용은 입력한 그대로 출력된다.
//	출력 서식 문자 : d(정수), f(실수), c(문자), s(문자열)
//	출력 서식의 형식 : %[-][0][n][.m]서식문자
//	- : 전체 자리수가 지정된 경우 왼쪽으로 맞춰 출력한다.
//	0 : 전체 자리수가 지정된 경우 왼쪽의 남는 자리에 0을 채워 출력한다.
//	n : 전체 자리수
//	.m : 소수점 아래 자리수, 잘리는 자리에서 반올림 시켜 화면에 표시한다.

	printf("%d\n", 10000);
	printf("%d\n", 1);
	printf("%d\n", 100);
	printf("=============================================\n");
	printf("%5d\n", 10000);
	printf("%5d\n", 1);
	printf("%-5d\n", 1);
	printf("%05d\n", 1);
	printf("%5d\n", 100);
	printf("=============================================\n");
	printf("%5s\n", "asdfg");
	printf("%5s\n", "a");
	printf("%-5s\n", "a");
	printf("%5s\n", "asd");
	printf("=============================================\n");
	printf("%4.0f\n", 59.5);
	printf("%4.0f\n", 60.4);
	printf("=============================================\n");

	printf("%d + %d = %d\n", 5, 3, 5 + 3);
	printf("%d - %d = %d\n", 5, 3, 5 - 3);
	printf("%d * %d = %d\n", 5, 3, 5 * 3);
	printf("%d / %d = %d\n", 5, 3, 5 / 3);				// 정수와 정수의 연산은 결과도 정수다. 몫
	printf("%d %% %d = %d\n", 5, 3, 5 % 3);				// 나머지
//	출력 서식에서 "%" 자체를 출력하려면 2개를 연속해 적어줘야 한다.

	printf("============ cout을 이용해 출력하기 =========\n");
	cout << 5 << " + " << 3 << " = " << 5 + 3 << endl;
	cout << 5 << " - " << 3 << " = " << 5 - 3 << endl;
	cout << 5 << " * " << 3 << " = " << 5 * 3 << endl;
	cout << 5 << " / " << 3 << " = " << 5 / 3 << endl;
	cout << 5 << " % " << 3 << " = " << 5 % 3 << endl;
	printf("=============================================\n");
	cout << setw(5) << 10000 << endl;
	cout << setw(5) << 1 << endl;
	cout << setw(5) << 100 << endl;
	printf("=============================================\n");

//	C/C++의 기본 자료형
//	bool(C++) : 1바이트, true(1) 또는 false(0)를 기억한다.
//	char : 1바이트, 1문자
//	short : 2바이트, -32768 ~ 32767 사이의 정수
//	int : 4바이트, -2147483648 ~ 2147483647 사이의 정수
//	long long int : 8바이트, -2의 63승 ~ 2의 63승 -1 사이의 정수
//	float : 4바이트, 단정도 실수, 소수점 아래 6자리 정도를 표현한다.
//	double : 8바이트, 배정도 실수, 소수점 아래 16자리 정도를 표현하다.

//	묵시적 형변환 : 자료형의 크기가 서로 다른 자료의 연산 결과는 크기가 큰 자료형으로 자동 변환된다.
	cout << 5 << " / " << 3. << " = " << 5 / 3. << endl;
	cout << 'A' << " + " << 32 << " = " << 'A' + 32 << endl;
	cout << 'a' << " - " << 32 << " = " << 'a' - 32 << endl;

//	명시적 형변환 : 프로그래머가 그 순간의 자료형을 지정할 수 있다. Casting이라고도 한다.
	cout << 5 << " / " << 3 << " = " << 5 / (double)3 << endl;
	cout << 'A' << " + " << 32 << " = " << (char)('A' + 32) << endl;
	cout << 'a' << " - " << 32 << " = " << (char)('a' - 32) << endl;

}