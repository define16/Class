#include "config.h"

void main() {

//	문자열은 마지막에 문자열의 끝을 의하는 NULL 문자('\0')가 자동으로 붙기 때문에 배열에 입력을 받으려 할 경우
//	입력받을 문자의 개수보다 1크게 줘야한다.
//	char ch1[4] = "test";			// NULL 문자가 들어갈 공간이 없으므로 에러가 발생된다.
//	char ch1[5] = "test";			// NULL 문자가 들어갈 공간을 위해서 문자의 개수보다 1크게 배열을 만든다.
	char ch1[] = "test";			// 배열의 크기를 생략하면 NULL 문자가 들어갈 공간까지 알아서 크기를 잡아준다.

//	메모리 어딘가에 test라는 문자열을 만들고 문자열의 시작 주소를 포인터에 넣어준다.
	char *ch2 = "test";				// 포인터는 자료형과 관계없이 무조건 4바이트의 기억공간을 가진다.
	char *ch3 = ch1;				// 배열명은 그 배열이 메모리에 생성된 시작 주소를 의미한다.
//	배열명은 주소이므로 "&"를 붙이지 않아도 되지만 배열요소는 변수와 같이 취급되므로 반드시 "&"를 붙여야 한다.

//	문자열을 문자 배열에 입력을 받으려 할 경우에는 배열은 메모리에 정적 할당된 기억공간을 가지고 있으므로 정상적으로
//	입력을 받을 수 있다.
//	char name[11];
//	cout << "이름을 입력하세요 : ";
//	cin >> name;
//	cout << name << "님 안녕하세요" << endl;

//	문자열을 포인터로 입력을 받으려 할 경우에는 포인터는 실제 기억공간을 가지고 있지 않으므로 포인터에 문자열을 입력
//	받으려 할 경우 에러가 발생된다.
//	에러 없이 포인터에 입력을 받으려면 메모리에 동적 할당으로 입력받은 데이터를 저장할 실제 기억공간을 만들고 그
//	시작 주소를 포인터에 넣어줘야 한다.
//	char *name;						// 실제 메모리를 할당받지 못했으므로 에러가 발생된다.
//	char *name = (char *)malloc(sizeof(char) * 10 + 1);		// 포인터가 메모리를 할당 받았으므로 정상 처리된다.
	char *name = new char[10 + 1];
	cout << "이름을 입력하세요 : ";
	cin >> name;
	cout << name << "님 안녕하세요" << endl;
//	free(name);
	delete[] name;

}