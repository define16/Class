/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2018-01-23 10:43:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.UI.second.third;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.net.URLEncoder;
import javax.xml.parsers.*;
import org.w3c.dom.*;

public final class mountain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 private static String getTagValue(String tag, Element eElement) {
    NodeList nlList = eElement.getElementsByTagName(tag).item(0).getChildNodes();
    Node nValue = (Node) nlList.item(0);
    if(nValue == null) 
        return null;
    return nValue.getNodeValue();
} 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("org.w3c.dom");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.xml.parsers");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width, \r\n");
      out.write("height=device-height\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>MountainInfo</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://code.jquery.com/mobile/1.4.5/jquery.mobile.structure-1.4.5.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/main.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/jquery.mobile.icons.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/font.css\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?clientId=HPZwmCJhMW9LwytcQR5k&submodules=geocoder\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      mysql.mysql db = null;
      db = (mysql.mysql) _jspx_page_context.getAttribute("db", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (db == null){
        db = new mysql.mysql();
        _jspx_page_context.setAttribute("db", db, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      mysql.mountainData data = null;
      data = (mysql.mountainData) _jspx_page_context.getAttribute("data", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (data == null){
        data = new mysql.mountainData();
        _jspx_page_context.setAttribute("data", data, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      api.Mountain m = null;
      m = (api.Mountain) _jspx_page_context.getAttribute("m", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (m == null){
        m = new api.Mountain();
        _jspx_page_context.setAttribute("m", m, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      mysql.LikeAndDislike like = null;
      like = (mysql.LikeAndDislike) _jspx_page_context.getAttribute("like", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (like == null){
        like = new mysql.LikeAndDislike();
        _jspx_page_context.setAttribute("like", like, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
 
	int like_count;	// 좋아요 갯수
	int dislike_count;	// 싫어요 갯수
	
	String code = request.getParameter("code");
	//int code = 113050202; //test

	like.setSwitch_like(1);

	int switch_like = 1;
	int switch_dislike = 1;


	Statement stmt = null;
	PreparedStatement pstmt = null;
	
	db.connect();
	db.setTableName("Infomountain");
	
	String tableName = db.getTableName();

	stmt = db.getStatement();
	
	// DB에 들어있는 정보를 가져와서 rs객체로저장 (출력)
	//ResultSet rs = stmt.executeQuery("select * from " + tableName + " where code_m =" + code );
	ResultSet rs = stmt.executeQuery("select * from infomountain join likemountain where " +
			"infomountain.code_m = likemountain.code_m and infomountain.code_m = " + code );
	request.setCharacterEncoding("UTF-8");
	while (rs.next()) {
		data.setName(rs.getString("name_m")) ;
		data.setCource( rs.getString("cource_m"));
		data.setHeight(rs.getDouble("height_m"));
		data.setLevel(rs.getString("level_m"));
		data.setUptime(rs.getDouble("uptime_m"));
		data.setDowntime(rs.getDouble("downtime_m"));
		like.setLike(rs.getInt("like_m")) ;
		like.setDislike( rs.getInt("dislike_m"));
	//}
	
	//ResultSet rs1 = stmt.executeQuery("select * from likemountain" + " where code_m =" + code );

	//request.setCharacterEncoding("UTF-8");
	//while (rs1.next()) {
	//	like.setLike(rs1.getInt("like_m")) ;
	//	like.setDislike( rs1.getInt("dislike_m"));
	}

	like_count = like.getLike();
	dislike_count = like.getDislike();
			
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");
	//api 가져오기
		String sreach_info = data.getName();
		m.setSreach_info(sreach_info);
		m.infoMountainAPI();
		m.imgMountainAPI();

		String sreachNo_img = m.getSreachNo_img();
		String address = m.getAddress();
		String height = m.getHeight();
		String details = m.getDetails();
		String summary = m.getSummary();
		String image1 = m.getImage1();
		String image2 = m.getImage2();
		String image3 = m.getImage3();
		
		db.disconnect();
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<center>\r\n");
      out.write("<table  width=100%  style=\"border:none\">\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"4\">\r\n");
      out.write("\t\t<ul style=\"list-style:none\">\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<img src='http://www.forest.go.kr/images/data/down/mountain/");
      out.print(image1 );
      out.write("' alt='' width=100%/>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<img src='http://www.forest.go.kr/images/data/down/mountain/");
      out.print(image2 );
      out.write("' alt='' width=100%/>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t\t<li>\r\n");
      out.write("\t\t\t\t<img src='http://www.forest.go.kr/images/data/down/mountain/");
      out.print(image3 );
      out.write("' alt='' width=100%/>\r\n");
      out.write("\t\t\t</li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"4\">\r\n");
      out.write("\t\t<div id=\"map\" style=\"width:100%;height:400px;\"></div>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"4\">\r\n");
      out.write("\t\t\t산이름 : ");
      out.print( data.getName() );
      out.write(" <br/>\r\n");
      out.write("\t\t\t등산로 :  ");
      out.print( data.getCource() );
      out.write(" <br/>\r\n");
      out.write("\t\t\t높이 : ");
      out.print( height );
      out.write(" m <br/>\r\n");
      out.write("\t\t\t난이도 :    ");
      out.print( data.getLevel() );
      out.write(" <br/>\r\n");
      out.write("\t\t\t올라가는 시간 :   ");
      out.print( data.getUptime() );
      out.write(" 시간 <br/>\r\n");
      out.write("\t\t\t내려오는 시간 :  ");
      out.print( data.getDowntime() );
      out.write(" 시간 <br/>\r\n");
      out.write("\t\t\t주소 : ");
      out.print( address );
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"4\">\r\n");
      out.write("\t<h2> 상세 설명 </h2>\r\n");
      out.write("\t ");
      out.print( details );
      out.write(" <br/>\r\n");
      out.write("\t ");
      out.print( summary );
      out.write("\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t좋아요  <a id=\"like\" name=\"like\">");
      out.print( like_count );
      out.write("</a>\r\n");
      out.write("\t</td>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t싫어요  <a id=\"dislike\" name=\"dislike\">");
      out.print( dislike_count );
      out.write("</a>\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<form id=\"like_form\" action=\"like.jsp\" method=\"POST\" >\r\n");
      out.write("\t\t\t<button id=\"like_btn\" onclick=\"like_onclick();\" style=\"width: 100%\"><img src=\"files/like.png\" ></button>\r\n");
      out.write("\t\t\t<input type=\"text\" value=\"");
      out.print( like_count );
      out.write("\" id =\"likes\" name=\"likes\" data-role = \"none\" style=\"display: none;\">\r\n");
      out.write("\t\t\t<input type=\"text\" value=\"");
      out.print( code );
      out.write("\" id =\"code1\" name=\"code1\" style=\"display: none;\" data-role = \"none\"/>\r\n");
      out.write("\t\t</form> \r\n");
      out.write("\t</td>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<form id=\"dislike_form\" action=\"dislike.jsp\" method=\"POST\" >\r\n");
      out.write("\t\t\t<button id=\"dislike_btn\" onclick=\"dislike_onclick();\" style=\"width: 100%\"><img src=\"files/dislike.png\" ></button>\r\n");
      out.write("\t\t\t<input type=\"text\" value=\"");
      out.print( dislike_count );
      out.write("\" id =\"dislikes\" name=\"dislikes\" style=\"display: none;\" data-role = \"none\">\r\n");
      out.write("\t\t\t<input type=\"text\" value=\"");
      out.print( code );
      out.write("\" id =\"code2\" name=\"code2\" style=\"display: none\" data-role = \"none\"/>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</center>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var likecount= ");
      out.print( like_count);
      out.write(";\r\n");
      out.write("var dislikecount= ");
      out.print( dislike_count);
      out.write(";\r\n");
      out.write("var count1=");
      out.print(switch_like);
      out.write(";\r\n");
      out.write("var count2=");
      out.print(switch_dislike);
      out.write(";\r\n");
      out.write("\r\n");
      out.write("function like_onclick() {\r\n");
      out.write("\r\n");
      out.write("\t   if(count1%2 == 1){\r\n");
      out.write("\t\t   likecount++;\r\n");
      out.write("\t\t   document.getElementById(\"like\").innerHTML = likecount;\r\n");
      out.write("\t\t   document.getElementById(\"likes\").value = likecount;\r\n");
      out.write("\t\t   alert(\"좋아요를 누르셨습니다.\");\r\n");
      out.write("\t\t   document.like_form.url.value=likecount;\r\n");
      out.write("\t\t  \r\n");
      out.write("\t   }\r\n");
      out.write("\t   else{\r\n");
      out.write("\t\t   likecount--;\r\n");
      out.write("\t\t   document.getElementById(\"like\").innerHTML = likecount;\r\n");
      out.write("\t\t   document.getElementById(\"likes\").value = likecount;\r\n");
      out.write("\t\t   alert(\"좋아요가 해제되었습니다.\");\r\n");
      out.write("\t\t   document.like_form.url.value=likecount;\r\n");
      out.write("\t\t   \r\n");
      out.write("\t\t   }\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction dislike_onclick() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t   if(count2%2 == 1){\r\n");
      out.write("\t\t\t   dislikecount++;\r\n");
      out.write("\t\t\t   document.getElementById(\"dislike\").innerHTML = dislikecount;\r\n");
      out.write("\t\t\t   document.getElementById(\"dislikes\").value = dislikecount;\r\n");
      out.write("\t\t\t   alert(\"싫어요를 누르셨습니다. ㅠ\");\r\n");
      out.write("\t\t\t   document.dislike_form.url.value=dislikecount;\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t\t   else{\r\n");
      out.write("\t\t\t   dislikecount--;\r\n");
      out.write("\t\t\t   document.getElementById(\"dislike\").innerHTML = dislikecount;\r\n");
      out.write("\t\t\t   document.getElementById(\"dislikes\").value = dislikecount;\r\n");
      out.write("\t\t\t   alert(\"싫어요를 해제합니다. ^^\");\r\n");
      out.write("\t\t\t   document.dislike_form.url.value=dislikecount;\r\n");
      out.write("\t\t\t   \r\n");
      out.write("\t\t   }\r\n");
      out.write("\r\n");
      out.write("\t\t \r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");

	double lat = 0;
	double lon = 0;
	int row_m = 0;
	String tmp = data.getName();
	String [] name_tmp = {};
	String loc_tableName = null;
	if(tmp.contains("_")) {
   		name_tmp = tmp.split("_");
	   	if(name_tmp.length == 2){
	   		tmp = name_tmp[0] + name_tmp[1];
	   		loc_tableName = "coordinate_" + code + "_" + name_tmp[0];
	   	}
	}
	else {
	 	loc_tableName = "coordinate_" + code + "_" + tmp;
	}
	//out.println(tableName);
	Statement stmt1 = null;
	Statement stmt2 = null;
	
	db.connect();
	stmt1 = db.getStatement();
	
	ResultSet row = stmt1.executeQuery("select row_m, lat_m, lon_m from " + loc_tableName + " order by index_m desc limit 1"); //executeQuery변경
	
	while (row.next()) {	
		row_m =  row.getInt("row_m") ;
		lat = row.getDouble("lat_m");
		lon = row.getDouble("lon_m");
	}
	db.disconnect();


      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language='javascript'>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\t$(\"#likes\").hide(); \r\n");
      out.write("    $(\"#code1\").hide(); \r\n");
      out.write("\t$(\"#dislikes\").hide(); \r\n");
      out.write("    $(\"#code2\").hide(); \r\n");
      out.write("   \t$(\"#url_send\").hide(); \r\n");
      out.write("    $(\"#name_send\").hide(); \r\n");
      out.write("});\r\n");
      out.write("\tvar map = new naver.maps.Map('map', {\r\n");
      out.write("\t    center: new naver.maps.LatLng(");
      out.print(lat);
      out.write(',');
      out.write(' ');
      out.print(lon);
      out.write("),\r\n");
      out.write("\t    zoom: 8\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
//DB에 들어있는 정보를 가져와서 rs객체로저장 (출력)
db.connect();
stmt2 = db.getStatement();
request.setCharacterEncoding("UTF-8");

ResultSet rs2;

for(int i=0; i<row_m;i++)	{
	rs2 = stmt2.executeQuery("select * from " + loc_tableName + " where row_m =" + i);

      out.write("\r\n");
      out.write("\r\n");
      out.write("var polyline");
      out.print( row_m);
      out.write(" = new naver.maps.Polyline({\r\n");
      out.write(" map: map,\r\n");
      out.write(" path: [\r\n");
      out.write(" ");

 	while (rs2.next()) {	    
 
      out.write("\r\n");
      out.write(" \tnew naver.maps.LatLng(");
      out.print( rs2.getDouble("lat_m")  );
      out.write(',');
      out.write(' ');
      out.print( rs2.getDouble("lon_m") );
      out.write("),\r\n");
      out.write(" ");
 
		}
 
      out.write("\r\n");
      out.write("\t],\r\n");
      out.write(" clickable: true,\r\n");
      out.write(" strokeColor: '#E51D1A',\r\n");
      out.write(" strokeStyle: 'solid',\r\n");
      out.write(" strokeOpacity: 0.5,\r\n");
      out.write(" strokeWeight: 2\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("naver.maps.Event.addListener(polyline");
      out.print( row_m );
      out.write(", 'mouseover', function() {\r\n");
      out.write("\r\n");
      out.write(" polyline.setOptions({\r\n");
      out.write("     strokeColor: '#5347AA',\r\n");
      out.write("     strokeStyle: 'longdash',\r\n");
      out.write("     strokeOpacity: 4\r\n");
      out.write(" });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("naver.maps.Event.addListener(polyline");
      out.print( row_m );
      out.write(", 'mouseout', function() {\r\n");
      out.write("\r\n");
      out.write(" polyline.setOptions({\r\n");
      out.write("     strokeColor: '#E51D1A',\r\n");
      out.write("     strokeStyle: 'solid',\r\n");
      out.write("     strokeOpacity: 2\r\n");
      out.write(" });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
 	
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
