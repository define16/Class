/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2018-05-08 07:15:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.UI;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mainUI_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width, \r\n");
      out.write("height=device-height\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Khand:600\" rel=\"stylesheet\">\r\n");

/*
   추가 사항
   
   1. 산첫페이지에 나오는 산이름을 텍스트로 적고 url 연결 v
   2. 풋터를 만들고 아래 만든이 적기v
   3. 말하기 버튼 클릭하면 말하기 버튼이 중지 버튼으로 변환 다시 시작하면 새로운 텍스트 필드에 적기
   4. 응급상황 탭에서 현재 좌표보기 눌렀을 때 위에 현 위치라고 나오게 하기
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>Hiking Boast</title>\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("<script src=\"http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://code.jquery.com/mobile/1.4.5/jquery.mobile.structure-1.4.5.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/main.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/jquery.mobile.icons.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"cssfile/font.css\" />\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("#content {\r\n");
      out.write("   margin:5px;\r\n");
      out.write("   padding:10;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body onresize=\"parent.resizeTo(500,400)\" onload=\"parent.resizeTo(500,400)\">\r\n");
      mysql.LikeAndDislike like = null;
      like = (mysql.LikeAndDislike) _jspx_page_context.getAttribute("like", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (like == null){
        like = new mysql.LikeAndDislike();
        _jspx_page_context.setAttribute("like", like, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write(" <!-- getter setter -->\r\n");



      out.write("\r\n");
      out.write("\r\n");
      out.write("   <div data-role=\"header\" data-position=\"fixed\" data-id=\"headernav\" data-position=\"inline\">\r\n");
      out.write("\r\n");
      out.write("      <form method=get action=\"dbsearch.jsp\">\r\n");
      out.write("         <input data-type=\"search\" name=\"search\" id=\"search\" placeholder=\"검색하고 싶은 산이름을 넣으세요.\" />\r\n");
      out.write("      </form>\r\n");
      out.write("      \r\n");
      out.write("   </div>\r\n");
      out.write("   <div data-role=\"header\">   \r\n");
      out.write("      <!-- ></div><-->\r\n");
      out.write("            \r\n");
      out.write("      \r\n");
      out.write("      <div data-role=\"navbar\">\r\n");
      out.write("         <div align=right>\r\n");
      out.write("         <table>\r\n");
      out.write("         \r\n");
      out.write("         <tr>\r\n");
      out.write("         <textarea id=\"result\" placeholder=\"말하기버튼을 누르고 말하시면 텍스트가 나옵니다.\"></textarea>\r\n");
      out.write("         \r\n");
      out.write("            <td><label data-inline=\"true\" style=\"margin-right:90px; font-family: 'Khand', sans-serif; font-size: 26px;\">S P E R O</label></td>\r\n");
      out.write("            <td><a data-inline=\"true\" href=\"#\" id=\"listen\" onclick=\"startConverting();\" class=\"ui-btn ui-icon-power ui-btn-icon-right\">말하기</a></td>\r\n");
      out.write("            <td><a data-inline=\"true\" href=\"#\" id=\"speak\" class=\"ui-btn ui-icon-audio ui-btn-icon-right\" >듣기</a></td>\r\n");
      out.write("            \r\n");
      out.write("         </tr>\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("         </table>\r\n");
      out.write("         </div>\r\n");
      out.write("         <ul>\r\n");
      out.write("            <li><input type=\"button\" value=\"홈\"  onclick=\"location.href='mainUI.jsp'\"></li>\r\n");
      out.write("            <li><a href=\"mountain.html\" target=\"MainDisplay_area\"  class=\"ui-btn-active ui-state-persist\" >산</a></li>\r\n");
      out.write("            <li><a href=\"emergency.html\"  target=\"MainDisplay_area\"> 응급상황 </a></li>\r\n");
      out.write("            <li><a href=\"information.html\" target=\"MainDisplay_area\"> 생생정보 </a></li>\r\n");
      out.write("         </ul>\r\n");
      out.write("      </div>\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <div id=\"content\"><span>\r\n");
      out.write("      <center>\r\n");
      out.write("          <iframe name=\"MainDisplay_area\"  src=\"mountain.html\"  seamless=\"true\"  width=100% height=\"800px\" frameborder=0 framespacing=0 \r\n");
      out.write("          marginheight=0 marginwidth=0  vspace=0></iframe> \r\n");
      out.write("      </center>\r\n");
      out.write("   </span></div>\r\n");
      out.write("   \r\n");
      out.write("      <div data-role=\"footer\" data-position=\"fixed\" data-position=\"inline\">\r\n");
      out.write("      <p> 융합소프트웨어학과 조준형</p>\r\n");
      out.write("      </div>\r\n");
      out.write("   <script src=\"../stt/stt.js\"></script>   \r\n");
      out.write("   <script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\r\n");
      out.write("   <script src=\"//cdnjs.cloudflare.com/ajax/libs/materialize/0.95.1/js/materialize.min.js\"></script>\r\n");
      out.write("   <script>\r\n");
      out.write("      window.onfocus=function(){\r\n");
      out.write("      }\r\n");
      out.write("      window.onload=function(){\r\n");
      out.write("       window.focus(); // 현재 window 즉 익스플러러를 윈도우 최상단에 위치\r\n");
      out.write("      window.moveTo(0,0); // 웹 페이지의 창 위치를 0,0 (왼쪽 최상단) 으로 고정\r\n");
      out.write("      window.resizeTo(400,800); // 웹페이지의 크기를 가로 1280 , 세로 800 으로 고정(확장 및 축소)\r\n");
      out.write("\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      $(function(){\r\n");
      out.write("           if ('speechSynthesis' in window) {\r\n");
      out.write("             speechSynthesis.onvoiceschanged = function() {\r\n");
      out.write("               var $voicelist = $('#voices'); //\r\n");
      out.write("\r\n");
      out.write("               if($voicelist.find('option').length == 0) {\r\n");
      out.write("                 speechSynthesis.getVoices().forEach(function(voice, index) {\r\n");
      out.write("                   var $option = $('<option>')\r\n");
      out.write("                   .val(index)\r\n");
      out.write("                   .html(voice.name + (voice.default ? ' (default)' :''));\r\n");
      out.write("\r\n");
      out.write("                   $voicelist.append($option);\r\n");
      out.write("                 });\r\n");
      out.write("\r\n");
      out.write("                 $voicelist.material_select();\r\n");
      out.write("               }\r\n");
      out.write("             }\r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write("       $('#speak').click(function(){\r\n");
      out.write("            var text = $('#result').val();\r\n");
      out.write("            var msg = new SpeechSynthesisUtterance();\r\n");
      out.write("            var voices = window.speechSynthesis.getVoices();\r\n");
      out.write("            msg.voice = voices[$('#voices').val()];\r\n");
      out.write("            msg.text = text;\r\n");
      out.write("\r\n");
      out.write("            msg.onend = function(e) {\r\n");
      out.write("              console.log('Finished in ' + event.elapsedTime + ' seconds.');\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            speechSynthesis.speak(msg);\r\n");
      out.write("          })\r\n");
      out.write("        } else {\r\n");
      out.write("          $('#modal1').openModal();\r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("   </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
